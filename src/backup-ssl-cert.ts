import packageJson from '../package.json';
import shelljs from 'shelljs';
import { BackupSslCertOptions, IScriptable } from 'types';
import chalk from 'chalk';
import AWS from 'aws-sdk';
import { continueLifecycle } from './utils/asg-utils';
import { getFile } from './utils/fs-utils';
import { putObject } from './utils/s3-utils';

export class BackupSslCert implements IScriptable {
    private readonly options: BackupSslCertOptions;

    private readonly s3Client: AWS.S3;
    private readonly autoScalingClient: AWS.AutoScaling;

    private readonly instanceId: string;

    constructor(options: BackupSslCertOptions) {
        this.options = options;

        this.s3Client = new AWS.S3({
            region: this.options.region
        });

        this.autoScalingClient = new AWS.AutoScaling({
            region: this.options.region
        });

        const { stdout } = shelljs.exec(`ec2metadata --instance-id`);
        this.instanceId = stdout.trim().replace('\n', '');

        this.run();
    }

    public run(): void {
        try {
            console.log(
                chalk.bgGreenBright(
                    `Running SSL certificate backup ${packageJson.version}`
                )
            );

            // attempt to backup the ssl cert but always proceed
            // with the lifecycle irregardless of the outcome
            this.backupCert().finally(async () => {
                try {
                    await continueLifecycle(
                        this.autoScalingClient,
                        this.options.autoScalingGroupName,
                        this.options.lifecycleHookName,
                        this.options.lifecycleActionToken,
                        this.instanceId
                    );
                } catch (e) {
                    console.log(
                        chalk.bgRedBright(`Failed to continue ASG lifecycle`),
                        e
                    );
                    return;
                }
            });
        } catch (e) {
            console.log(
                chalk.bgRedBright(
                    `Something failed during SSL certificate backup`
                ),
                e
            );
            return;
        }
    }

    /**
     * Backs up the SSL certificate generated by Lets Encrypt by uploading certificate artifacts to an encrypted S3 bucket
     */
    private async backupCert(): Promise<void> {
        console.log(
            chalk.bgGreenBright(
                `Backing up SSL certificate from EC2 instance ${this.instanceId}`
            )
        );

        const domainName = this.options.domainName;

        let certPem: string | undefined = getFile(
            `/etc/letsencrypt/live/${domainName}/cert.pem`
        );
        let chainPem: string | undefined = getFile(
            `/etc/letsencrypt/live/${domainName}/chain.pem`
        );
        let privkeyPem: string | undefined = getFile(
            `/etc/letsencrypt/live/${domainName}/privkey.pem`
        );
        let fullchainPem: string | undefined = getFile(
            `/etc/letsencrypt/live/${domainName}/fullchain.pem`
        );

        if (
            typeof certPem === 'undefined' ||
            typeof chainPem === 'undefined' ||
            typeof privkeyPem === 'undefined' ||
            typeof fullchainPem === 'undefined'
        ) {
            console.log(
                chalk.bgYellowBright(
                    `Not backing up ssl cert because one or more certificate files are mising/cannot be read in /etc/letsencrypt/live/${domainName}`
                )
            );
            return;
        }

        try {
            const result = await Promise.all([
                putObject(
                    this.s3Client,
                    this.options.bucketName,
                    `letsencrypt/${domainName}/cert.pem`,
                    certPem
                ),
                putObject(
                    this.s3Client,
                    this.options.bucketName,
                    `letsencrypt/${domainName}/chain.pem`,
                    chainPem
                ),
                putObject(
                    this.s3Client,
                    this.options.bucketName,
                    `letsencrypt/${domainName}/privkey.pem`,
                    privkeyPem
                ),
                putObject(
                    this.s3Client,
                    this.options.bucketName,
                    `letsencrypt/${domainName}/fullchain.pem`,
                    fullchainPem
                )
            ]);

            console.log(
                chalk.greenBright(
                    `Successfully uploaded certificate to ${this.options.bucketName}`
                )
            );
        } catch (e) {
            console.log(
                chalk.bgRedBright(
                    `Failed to upload certificate to ${this.options.bucketName}`
                ),
                e
            );
            return;
        }
    }
}
